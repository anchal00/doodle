// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	websocket "github.com/gorilla/websocket"
)

// ConnectionStore is an autogenerated mock type for the ConnectionStore type
type ConnectionStore struct {
	mock.Mock
}

type ConnectionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectionStore) EXPECT() *ConnectionStore_Expecter {
	return &ConnectionStore_Expecter{mock: &_m.Mock}
}

// AddConnection provides a mock function with given fields: player, gameId, conn
func (_m *ConnectionStore) AddConnection(player string, gameId string, conn *websocket.Conn) {
	_m.Called(player, gameId, conn)
}

// ConnectionStore_AddConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddConnection'
type ConnectionStore_AddConnection_Call struct {
	*mock.Call
}

// AddConnection is a helper method to define mock.On call
//   - player string
//   - gameId string
//   - conn *websocket.Conn
func (_e *ConnectionStore_Expecter) AddConnection(player interface{}, gameId interface{}, conn interface{}) *ConnectionStore_AddConnection_Call {
	return &ConnectionStore_AddConnection_Call{Call: _e.mock.On("AddConnection", player, gameId, conn)}
}

func (_c *ConnectionStore_AddConnection_Call) Run(run func(player string, gameId string, conn *websocket.Conn)) *ConnectionStore_AddConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*websocket.Conn))
	})
	return _c
}

func (_c *ConnectionStore_AddConnection_Call) Return() *ConnectionStore_AddConnection_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConnectionStore_AddConnection_Call) RunAndReturn(run func(string, string, *websocket.Conn)) *ConnectionStore_AddConnection_Call {
	_c.Call.Return(run)
	return _c
}

// AddSessionToken provides a mock function with given fields: player, gameId, token
func (_m *ConnectionStore) AddSessionToken(player string, gameId string, token string) {
	_m.Called(player, gameId, token)
}

// ConnectionStore_AddSessionToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSessionToken'
type ConnectionStore_AddSessionToken_Call struct {
	*mock.Call
}

// AddSessionToken is a helper method to define mock.On call
//   - player string
//   - gameId string
//   - token string
func (_e *ConnectionStore_Expecter) AddSessionToken(player interface{}, gameId interface{}, token interface{}) *ConnectionStore_AddSessionToken_Call {
	return &ConnectionStore_AddSessionToken_Call{Call: _e.mock.On("AddSessionToken", player, gameId, token)}
}

func (_c *ConnectionStore_AddSessionToken_Call) Run(run func(player string, gameId string, token string)) *ConnectionStore_AddSessionToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ConnectionStore_AddSessionToken_Call) Return() *ConnectionStore_AddSessionToken_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConnectionStore_AddSessionToken_Call) RunAndReturn(run func(string, string, string)) *ConnectionStore_AddSessionToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnection provides a mock function with given fields: player, gameId
func (_m *ConnectionStore) GetConnection(player string, gameId string) *websocket.Conn {
	ret := _m.Called(player, gameId)

	if len(ret) == 0 {
		panic("no return value specified for GetConnection")
	}

	var r0 *websocket.Conn
	if rf, ok := ret.Get(0).(func(string, string) *websocket.Conn); ok {
		r0 = rf(player, gameId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*websocket.Conn)
		}
	}

	return r0
}

// ConnectionStore_GetConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnection'
type ConnectionStore_GetConnection_Call struct {
	*mock.Call
}

// GetConnection is a helper method to define mock.On call
//   - player string
//   - gameId string
func (_e *ConnectionStore_Expecter) GetConnection(player interface{}, gameId interface{}) *ConnectionStore_GetConnection_Call {
	return &ConnectionStore_GetConnection_Call{Call: _e.mock.On("GetConnection", player, gameId)}
}

func (_c *ConnectionStore_GetConnection_Call) Run(run func(player string, gameId string)) *ConnectionStore_GetConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ConnectionStore_GetConnection_Call) Return(_a0 *websocket.Conn) *ConnectionStore_GetConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConnectionStore_GetConnection_Call) RunAndReturn(run func(string, string) *websocket.Conn) *ConnectionStore_GetConnection_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionToken provides a mock function with given fields: player, gameId
func (_m *ConnectionStore) GetSessionToken(player string, gameId string) string {
	ret := _m.Called(player, gameId)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionToken")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(player, gameId)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ConnectionStore_GetSessionToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionToken'
type ConnectionStore_GetSessionToken_Call struct {
	*mock.Call
}

// GetSessionToken is a helper method to define mock.On call
//   - player string
//   - gameId string
func (_e *ConnectionStore_Expecter) GetSessionToken(player interface{}, gameId interface{}) *ConnectionStore_GetSessionToken_Call {
	return &ConnectionStore_GetSessionToken_Call{Call: _e.mock.On("GetSessionToken", player, gameId)}
}

func (_c *ConnectionStore_GetSessionToken_Call) Run(run func(player string, gameId string)) *ConnectionStore_GetSessionToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ConnectionStore_GetSessionToken_Call) Return(_a0 string) *ConnectionStore_GetSessionToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConnectionStore_GetSessionToken_Call) RunAndReturn(run func(string, string) string) *ConnectionStore_GetSessionToken_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveConnection provides a mock function with given fields: player, gameId
func (_m *ConnectionStore) RemoveConnection(player string, gameId string) {
	_m.Called(player, gameId)
}

// ConnectionStore_RemoveConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveConnection'
type ConnectionStore_RemoveConnection_Call struct {
	*mock.Call
}

// RemoveConnection is a helper method to define mock.On call
//   - player string
//   - gameId string
func (_e *ConnectionStore_Expecter) RemoveConnection(player interface{}, gameId interface{}) *ConnectionStore_RemoveConnection_Call {
	return &ConnectionStore_RemoveConnection_Call{Call: _e.mock.On("RemoveConnection", player, gameId)}
}

func (_c *ConnectionStore_RemoveConnection_Call) Run(run func(player string, gameId string)) *ConnectionStore_RemoveConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ConnectionStore_RemoveConnection_Call) Return() *ConnectionStore_RemoveConnection_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConnectionStore_RemoveConnection_Call) RunAndReturn(run func(string, string)) *ConnectionStore_RemoveConnection_Call {
	_c.Call.Return(run)
	return _c
}

// NewConnectionStore creates a new instance of ConnectionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectionStore {
	mock := &ConnectionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
