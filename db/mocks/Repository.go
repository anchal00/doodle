// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	db "doodle/db"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// AddPlayerToGame provides a mock function with given fields: gameId, playerName
func (_m *Repository) AddPlayerToGame(gameId string, playerName string) error {
	ret := _m.Called(gameId, playerName)

	if len(ret) == 0 {
		panic("no return value specified for AddPlayerToGame")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(gameId, playerName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_AddPlayerToGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPlayerToGame'
type Repository_AddPlayerToGame_Call struct {
	*mock.Call
}

// AddPlayerToGame is a helper method to define mock.On call
//   - gameId string
//   - playerName string
func (_e *Repository_Expecter) AddPlayerToGame(gameId interface{}, playerName interface{}) *Repository_AddPlayerToGame_Call {
	return &Repository_AddPlayerToGame_Call{Call: _e.mock.On("AddPlayerToGame", gameId, playerName)}
}

func (_c *Repository_AddPlayerToGame_Call) Run(run func(gameId string, playerName string)) *Repository_AddPlayerToGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Repository_AddPlayerToGame_Call) Return(_a0 error) *Repository_AddPlayerToGame_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_AddPlayerToGame_Call) RunAndReturn(run func(string, string) error) *Repository_AddPlayerToGame_Call {
	_c.Call.Return(run)
	return _c
}

// CloseConnection provides a mock function with given fields:
func (_m *Repository) CloseConnection() {
	_m.Called()
}

// Repository_CloseConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseConnection'
type Repository_CloseConnection_Call struct {
	*mock.Call
}

// CloseConnection is a helper method to define mock.On call
func (_e *Repository_Expecter) CloseConnection() *Repository_CloseConnection_Call {
	return &Repository_CloseConnection_Call{Call: _e.mock.On("CloseConnection")}
}

func (_c *Repository_CloseConnection_Call) Run(run func()) *Repository_CloseConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_CloseConnection_Call) Return() *Repository_CloseConnection_Call {
	_c.Call.Return()
	return _c
}

func (_c *Repository_CloseConnection_Call) RunAndReturn(run func()) *Repository_CloseConnection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNewGame provides a mock function with given fields: gameId, player, maxPlayers, totalRounds
func (_m *Repository) CreateNewGame(gameId string, player string, maxPlayers uint8, totalRounds uint8) error {
	ret := _m.Called(gameId, player, maxPlayers, totalRounds)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewGame")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, uint8, uint8) error); ok {
		r0 = rf(gameId, player, maxPlayers, totalRounds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_CreateNewGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNewGame'
type Repository_CreateNewGame_Call struct {
	*mock.Call
}

// CreateNewGame is a helper method to define mock.On call
//   - gameId string
//   - player string
//   - maxPlayers uint8
//   - totalRounds uint8
func (_e *Repository_Expecter) CreateNewGame(gameId interface{}, player interface{}, maxPlayers interface{}, totalRounds interface{}) *Repository_CreateNewGame_Call {
	return &Repository_CreateNewGame_Call{Call: _e.mock.On("CreateNewGame", gameId, player, maxPlayers, totalRounds)}
}

func (_c *Repository_CreateNewGame_Call) Run(run func(gameId string, player string, maxPlayers uint8, totalRounds uint8)) *Repository_CreateNewGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(uint8), args[3].(uint8))
	})
	return _c
}

func (_c *Repository_CreateNewGame_Call) Return(_a0 error) *Repository_CreateNewGame_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_CreateNewGame_Call) RunAndReturn(run func(string, string, uint8, uint8) error) *Repository_CreateNewGame_Call {
	_c.Call.Return(run)
	return _c
}

// GetGameById provides a mock function with given fields: gameId
func (_m *Repository) GetGameById(gameId string) *db.Game {
	ret := _m.Called(gameId)

	if len(ret) == 0 {
		panic("no return value specified for GetGameById")
	}

	var r0 *db.Game
	if rf, ok := ret.Get(0).(func(string) *db.Game); ok {
		r0 = rf(gameId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Game)
		}
	}

	return r0
}

// Repository_GetGameById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameById'
type Repository_GetGameById_Call struct {
	*mock.Call
}

// GetGameById is a helper method to define mock.On call
//   - gameId string
func (_e *Repository_Expecter) GetGameById(gameId interface{}) *Repository_GetGameById_Call {
	return &Repository_GetGameById_Call{Call: _e.mock.On("GetGameById", gameId)}
}

func (_c *Repository_GetGameById_Call) Run(run func(gameId string)) *Repository_GetGameById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_GetGameById_Call) Return(_a0 *db.Game) *Repository_GetGameById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_GetGameById_Call) RunAndReturn(run func(string) *db.Game) *Repository_GetGameById_Call {
	_c.Call.Return(run)
	return _c
}

// GetGamePlayerByName provides a mock function with given fields: gameId, playerName
func (_m *Repository) GetGamePlayerByName(gameId string, playerName string) db.Player {
	ret := _m.Called(gameId, playerName)

	if len(ret) == 0 {
		panic("no return value specified for GetGamePlayerByName")
	}

	var r0 db.Player
	if rf, ok := ret.Get(0).(func(string, string) db.Player); ok {
		r0 = rf(gameId, playerName)
	} else {
		r0 = ret.Get(0).(db.Player)
	}

	return r0
}

// Repository_GetGamePlayerByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGamePlayerByName'
type Repository_GetGamePlayerByName_Call struct {
	*mock.Call
}

// GetGamePlayerByName is a helper method to define mock.On call
//   - gameId string
//   - playerName string
func (_e *Repository_Expecter) GetGamePlayerByName(gameId interface{}, playerName interface{}) *Repository_GetGamePlayerByName_Call {
	return &Repository_GetGamePlayerByName_Call{Call: _e.mock.On("GetGamePlayerByName", gameId, playerName)}
}

func (_c *Repository_GetGamePlayerByName_Call) Run(run func(gameId string, playerName string)) *Repository_GetGamePlayerByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Repository_GetGamePlayerByName_Call) Return(_a0 db.Player) *Repository_GetGamePlayerByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_GetGamePlayerByName_Call) RunAndReturn(run func(string, string) db.Player) *Repository_GetGamePlayerByName_Call {
	_c.Call.Return(run)
	return _c
}

// SetupConnection provides a mock function with given fields: database
func (_m *Repository) SetupConnection(database string) error {
	ret := _m.Called(database)

	if len(ret) == 0 {
		panic("no return value specified for SetupConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(database)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_SetupConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupConnection'
type Repository_SetupConnection_Call struct {
	*mock.Call
}

// SetupConnection is a helper method to define mock.On call
//   - database string
func (_e *Repository_Expecter) SetupConnection(database interface{}) *Repository_SetupConnection_Call {
	return &Repository_SetupConnection_Call{Call: _e.mock.On("SetupConnection", database)}
}

func (_c *Repository_SetupConnection_Call) Run(run func(database string)) *Repository_SetupConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_SetupConnection_Call) Return(_a0 error) *Repository_SetupConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_SetupConnection_Call) RunAndReturn(run func(string) error) *Repository_SetupConnection_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePlayerScore provides a mock function with given fields: gameId, playerName, scoreDelta
func (_m *Repository) UpdatePlayerScore(gameId string, playerName string, scoreDelta uint8) error {
	ret := _m.Called(gameId, playerName, scoreDelta)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePlayerScore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, uint8) error); ok {
		r0 = rf(gameId, playerName, scoreDelta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_UpdatePlayerScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePlayerScore'
type Repository_UpdatePlayerScore_Call struct {
	*mock.Call
}

// UpdatePlayerScore is a helper method to define mock.On call
//   - gameId string
//   - playerName string
//   - scoreDelta uint8
func (_e *Repository_Expecter) UpdatePlayerScore(gameId interface{}, playerName interface{}, scoreDelta interface{}) *Repository_UpdatePlayerScore_Call {
	return &Repository_UpdatePlayerScore_Call{Call: _e.mock.On("UpdatePlayerScore", gameId, playerName, scoreDelta)}
}

func (_c *Repository_UpdatePlayerScore_Call) Run(run func(gameId string, playerName string, scoreDelta uint8)) *Repository_UpdatePlayerScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(uint8))
	})
	return _c
}

func (_c *Repository_UpdatePlayerScore_Call) Return(_a0 error) *Repository_UpdatePlayerScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_UpdatePlayerScore_Call) RunAndReturn(run func(string, string, uint8) error) *Repository_UpdatePlayerScore_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
