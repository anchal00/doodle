// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	state "github.com/anchal00/doodle/internal/state"
	mock "github.com/stretchr/testify/mock"
)

// StateStore is an autogenerated mock type for the StateStore type
type StateStore struct {
	mock.Mock
}

type StateStore_Expecter struct {
	mock *mock.Mock
}

func (_m *StateStore) EXPECT() *StateStore_Expecter {
	return &StateStore_Expecter{mock: &_m.Mock}
}

// GetGameState provides a mock function with given fields: gameId
func (_m *StateStore) GetGameState(gameId string) (*state.GameState, error) {
	ret := _m.Called(gameId)

	if len(ret) == 0 {
		panic("no return value specified for GetGameState")
	}

	var r0 *state.GameState
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*state.GameState, error)); ok {
		return rf(gameId)
	}
	if rf, ok := ret.Get(0).(func(string) *state.GameState); ok {
		r0 = rf(gameId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.GameState)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(gameId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateStore_GetGameState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameState'
type StateStore_GetGameState_Call struct {
	*mock.Call
}

// GetGameState is a helper method to define mock.On call
//   - gameId string
func (_e *StateStore_Expecter) GetGameState(gameId interface{}) *StateStore_GetGameState_Call {
	return &StateStore_GetGameState_Call{Call: _e.mock.On("GetGameState", gameId)}
}

func (_c *StateStore_GetGameState_Call) Run(run func(gameId string)) *StateStore_GetGameState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *StateStore_GetGameState_Call) Return(_a0 *state.GameState, _a1 error) *StateStore_GetGameState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateStore_GetGameState_Call) RunAndReturn(run func(string) (*state.GameState, error)) *StateStore_GetGameState_Call {
	_c.Call.Return(run)
	return _c
}

// SetGameState provides a mock function with given fields: gameId, gs
func (_m *StateStore) SetGameState(gameId string, gs *state.GameState) {
	_m.Called(gameId, gs)
}

// StateStore_SetGameState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGameState'
type StateStore_SetGameState_Call struct {
	*mock.Call
}

// SetGameState is a helper method to define mock.On call
//   - gameId string
//   - gs *state.GameState
func (_e *StateStore_Expecter) SetGameState(gameId interface{}, gs interface{}) *StateStore_SetGameState_Call {
	return &StateStore_SetGameState_Call{Call: _e.mock.On("SetGameState", gameId, gs)}
}

func (_c *StateStore_SetGameState_Call) Run(run func(gameId string, gs *state.GameState)) *StateStore_SetGameState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*state.GameState))
	})
	return _c
}

func (_c *StateStore_SetGameState_Call) Return() *StateStore_SetGameState_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateStore_SetGameState_Call) RunAndReturn(run func(string, *state.GameState)) *StateStore_SetGameState_Call {
	_c.Run(run)
	return _c
}

// NewStateStore creates a new instance of StateStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateStore {
	mock := &StateStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
